Assign professions to people [cant be kids] [1 at 1 place at a time]
	Police [arpox 10% of population]
		catch criminals & kill them on a crime scene with x% (depends on the criminal's activities) chance
	Ambulance [aprox 5% of population]
		when someone is going to die, call the ambulance [if there is enough capacity], before dying, try to save them in 2 minutes with a 20% chance
	Fire Fighter [aprox 10% of population]
		during a disaster, fire fighters should save buildings [and people in it] with a 15% chance
		in an apartment house, the chance of saving a flat gets lower with 10% by every 3rd flat

Create criminals who are killing people [cant be kids]
	[aprox 8% of people]
	killing someone every 5 min
	fields:
		killed list
		chance of getting caught [increases by 5% with every crime] (no crime -> 0 chance of getting caught...)

cleanup


City ->
    profession list ok
        hashmap
            police
                people list
            .
            .
            .
    Criminal list ok
        people list

Person > assign stuff on or after generating
    profession field = string (default null) ok
    iscriminal field = bool (default false) ok
    killed people = list of people ok
    chance of being arrested = int (default 0 max 100)

    person set workers ->
        if criminal ->
            set killing worker

    die()
        call ambulance after 2 minutes & try to save the person
        & call police if person was killed by criminal


disaster ->
    last wave before destroying buildings, call available firefighter to each building, & try to save them  [thus the families in it]


    db record & report for
        saved people [ambulance, or firefighter]
        caught criminals [police]
        killed people [by criminals]

refactor class names [no plural]
Report
	merge death news, new born table & create new col [enum]
	New abstract class for reports with same dao [newspaperdao]
	report person history with paging [limit]
	dto refactor [common fields into abstract class]

	fetch everything with paging [limit] where possible